pipeline {
    agent {
        docker {
            image 'node:18-alpine'
            reuseNode true
        }
    }

    environment {
        NETLIFY_SITE_ID = '4084bc2b-2632-4a33-8aaa-4435cf4f995b'
        NETLIFY_AUTH = credentials('netlify-token')
        TZ = 'Asia/Bangkok'
        CI = 'true' // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£ environment ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÇ‡∏´‡∏°‡∏î CI
    }

    options {
        timestamps()
        timeout(time: 30, unit: 'MINUTES') // ‡∏à‡∏≥‡∏Å‡∏±‡∏î‡πÄ‡∏ß‡∏•‡∏≤‡∏Å‡∏≤‡∏£ build ‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î 30 ‡∏ô‡∏≤‡∏ó‡∏µ
        buildDiscarder(logRotator(numToKeepStr: '10')) // ‡πÄ‡∏Å‡πá‡∏ö‡πÄ‡∏â‡∏û‡∏≤‡∏∞ 10 build ‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
    }

    stages {
        stage('üßæ Checkout Source Code') {
            steps {
                checkout scm // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÉ‡∏´‡πâ‡πÅ‡∏ô‡πà‡πÉ‡∏à‡∏ß‡πà‡∏≤‡πÇ‡∏Ñ‡πâ‡∏î‡∏ñ‡∏π‡∏Å checkout ‡∏à‡∏£‡∏¥‡∏á‡πÜ
                echo "\u001B[34m‚úÖ Source code checked out successfully\u001B[0m"
            }
        }

        stage('üì¶ Install Dependencies') {
            steps {
                echo "\u001B[36m================ Installing Dependencies ================\u001B[0m"
                sh 'npm ci --no-audit' // ‡πÉ‡∏ä‡πâ npm ci ‡πÅ‡∏ó‡∏ô install ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏öÁí∞Â¢É CI
                sh 'npm cache clean --force' // ‡∏•‡∏ö cache ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡∏£‡∏∞‡∏´‡∏¢‡∏±‡∏î‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà
            }
        }

        stage('üîç Lint Code') {
            steps {
                echo "\u001B[33m================ Running Linter ================\u001B[0m"
                sh 'npm run lint || true' // ‡πÉ‡∏ä‡πâ || true ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ‡∏•‡∏¥‡∏ô‡∏ó‡πå‡∏ú‡∏¥‡∏î‡∏ó‡∏≥‡πÉ‡∏´‡πâ build ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß
            }
        }

        stage('‚öôÔ∏è Build Project') {
            steps {
                echo "\u001B[35m================ Building the Project ================\u001B[0m"
                sh 'npm run build'
                
                // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ build directory ‡∏à‡∏£‡∏¥‡∏á‡πÜ
                script {
                    if (!fileExists('build')) {
                        error('Build directory was not created! Build failed.')
                    }
                }
            }
        }

        stage('üß™ Run Tests') {
            steps {
                echo "\u001B[32m================ Running Tests ================\u001B[0m"
                sh 'npm test -- --watchAll=false' // ‡πÄ‡∏û‡∏¥‡πà‡∏° flag ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö CI
            }
            
            post {
                always {
                    junit testResults: '**/test-results/*.xml', allowEmptyResults: true
                }
            }
        }

        stage('üöÄ Deploy to Netlify') {
            steps {
                echo "\u001B[33m================ Deploying to Netlify ================\u001B[0m"
                script {
                    try {
                        sh '''
                            npm install netlify-cli --save-dev --no-audit
                            ./node_modules/.bin/netlify deploy \
                                --dir=build \
                                --prod \
                                --site=$NETLIFY_SITE_ID \
                                --auth=$NETLIFY_AUTH \
                                --json > netlify-deploy.json
                        '''
                        
                        // ‡∏≠‡πà‡∏≤‡∏ô‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå JSON ‡∏à‡∏≤‡∏Å Netlify
                        def deployOutput = readJSON file: 'netlify-deploy.json'
                        env.DEPLOY_URL = deployOutput.deploy_url
                        echo "\u001B[32müöÄ Deployed to: ${env.DEPLOY_URL}\u001B[0m"
                    } catch (Exception e) {
                        error("Deployment failed: ${e.message}")
                    }
                }
            }
        }
    }

    post {
        success {
            echo "\u001B[32müéâ Build & Deploy Success!\u001B[0m"
            script {
                slackSend(color: 'good', message: "Build Success: ${env.JOB_NAME} #${env.BUILD_NUMBER}\nDeployed to: ${env.DEPLOY_URL ?: 'Not available'}")
            }
        }

        failure {
            echo "\u001B[31m‚ùå Build Failed. Please check the logs.\u001B[0m"
            script {
                slackSend(color: 'danger', message: "Build Failed: ${env.JOB_NAME} #${env.BUILD_NUMBER}")
            }
        }

        cleanup {
            sh 'rm -rf node_modules' // ‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡∏£‡∏∞‡∏´‡∏¢‡∏±‡∏î‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà
            sh 'rm -f netlify-deploy.json' // ‡∏•‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß
        }
    }
}